/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnPostReader generated by hbm2java
 */
@Entity
@Table(name = "PN_POST_READER")
public class PnPostReader implements Serializable {

	private PnPostReaderPK comp_id;

	private Date dateRead;

	private PnPerson pnPerson;

	private PnPost pnPost;

	public PnPostReader() {
	}

	public PnPostReader(PnPostReaderPK comp_id, Date dateRead) {
		this.comp_id = comp_id;
		this.dateRead = dateRead;
	}

	public PnPostReader(PnPostReaderPK comp_id, Date dateRead, PnPerson pnPerson, PnPost pnPost) {
		this.comp_id = comp_id;
		this.dateRead = dateRead;
		this.pnPerson = pnPerson;
		this.pnPost = pnPost;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "personId", column = @Column(name = "PERSON_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "postId", column = @Column(name = "POST_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "discussionGroupId", column = @Column(name = "DISCUSSION_GROUP_ID", nullable = false, length = 20)) })
	public PnPostReaderPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnPostReaderPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "DATE_READ", nullable = false, length = 7)
	public Date getDateRead() {
		return this.dateRead;
	}

	public void setDateRead(Date dateRead) {
		this.dateRead = dateRead;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPerson.class)
	@JoinColumn(name = "PERSON_ID", insertable = false, updatable = false)
	public PnPerson getPnPerson() {
		return this.pnPerson;
	}

	public void setPnPerson(PnPerson pnPerson) {
		this.pnPerson = pnPerson;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPost.class)
	@JoinColumns( {
			@JoinColumn(name = "POST_ID", referencedColumnName = "POST_ID", insertable = false, updatable = false),
			@JoinColumn(name = "DISCUSSION_GROUP_ID", referencedColumnName = "DISCUSSION_GROUP_ID", insertable = false, updatable = false) })
	public PnPost getPnPost() {
		return this.pnPost;
	}

	public void setPnPost(PnPost pnPost) {
		this.pnPost = pnPost;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnPostReader))
			return false;
		PnPostReader castOther = (PnPostReader) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
