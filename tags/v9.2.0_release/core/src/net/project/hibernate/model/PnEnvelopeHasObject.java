/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnEnvelopeHasObject generated by hbm2java
 */
@Entity
@Table(name = "PN_ENVELOPE_HAS_OBJECT")
public class PnEnvelopeHasObject implements java.io.Serializable {

	private PnEnvelopeHasObjectPK comp_id;

	/** persistent field */
	private Date crc;

	/** persistent field */
	private String recordStatus;

	/** nullable persistent field */
	private PnObject pnObject;

	/** nullable persistent field */
	private PnWorkflowEnvelope pnWorkflowEnvelope;

	/** persistent field */
	private Set pnEnvelopeVersionHasObjects = new HashSet(0);

	public PnEnvelopeHasObject() {
	}

	public PnEnvelopeHasObject(PnEnvelopeHasObjectPK comp_id, Date crc, String recordStatus) {
		this.comp_id = comp_id;
		this.crc = crc;
		this.recordStatus = recordStatus;
	}

	public PnEnvelopeHasObject(PnEnvelopeHasObjectPK comp_id, Date crc, String recordStatus, PnObject pnObject,
			PnWorkflowEnvelope pnWorkflowEnvelope, Set pnEnvelopeVersionHasObjects) {
		this.comp_id = comp_id;
		this.crc = crc;
		this.recordStatus = recordStatus;
		this.pnObject = pnObject;
		this.pnWorkflowEnvelope = pnWorkflowEnvelope;
		this.pnEnvelopeVersionHasObjects = pnEnvelopeVersionHasObjects;
	}

	/** minimal constructor */
	public PnEnvelopeHasObject(net.project.hibernate.model.PnEnvelopeHasObjectPK comp_id, Date crc,
			String recordStatus, Set pnEnvelopeVersionHasObjects) {
		this.comp_id = comp_id;
		this.crc = crc;
		this.recordStatus = recordStatus;
		this.pnEnvelopeVersionHasObjects = pnEnvelopeVersionHasObjects;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "envelopeId", column = @Column(name = "ENVELOPE_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "objectId", column = @Column(name = "OBJECT_ID", nullable = false, length = 20)) })
	public PnEnvelopeHasObjectPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnEnvelopeHasObjectPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "CRC", nullable = false, length = 7)
	public Date getCrc() {
		return this.crc;
	}

	public void setCrc(Date crc) {
		this.crc = crc;
	}

	@Column(name = "RECORD_STATUS", nullable = false, length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnObject.class)
	@JoinColumn(name = "OBJECT_ID", insertable = false, updatable = false)
	public PnObject getPnObject() {
		return this.pnObject;
	}

	public void setPnObject(PnObject pnObject) {
		this.pnObject = pnObject;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnWorkflowEnvelope.class)
	@JoinColumn(name = "ENVELOPE_ID", insertable = false, updatable = false)
	public PnWorkflowEnvelope getPnWorkflowEnvelope() {
		return this.pnWorkflowEnvelope;
	}

	public void setPnWorkflowEnvelope(PnWorkflowEnvelope pnWorkflowEnvelope) {
		this.pnWorkflowEnvelope = pnWorkflowEnvelope;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnEnvelopeHasObject", targetEntity = PnEnvelopeVersionHasObject.class)
	@Transient
	public Set getPnEnvelopeVersionHasObjects() {
		return this.pnEnvelopeVersionHasObjects;
	}

	public void setPnEnvelopeVersionHasObjects(Set pnEnvelopeVersionHasObjects) {
		this.pnEnvelopeVersionHasObjects = pnEnvelopeVersionHasObjects;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnEnvelopeHasObject))
			return false;
		PnEnvelopeHasObject castOther = (PnEnvelopeHasObject) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}
}
