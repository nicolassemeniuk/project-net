/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
*/
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnSpaceHasSpace generated by hbm2java
 */
@Entity
@Table(name="PN_SPACE_HAS_SPACE"
)
public class PnSpaceHasSpace implements Serializable {


     private PnSpaceHasSpacePK comp_id;
     private Integer createdBy;
     private Date dateCreated;
     private String relationshipParentToChild;
     private String relationshipChildToParent;
     private String recordStatus;
     private String parentSpaceType;
     private String childSpaceType;
     private PnObject pnObject;
     
    public PnSpaceHasSpace() {
    }

	
    public PnSpaceHasSpace(PnSpaceHasSpacePK comp_id, String recordStatus) {
        this.comp_id = comp_id;
        this.recordStatus = recordStatus;
    }

    public PnSpaceHasSpace(PnSpaceHasSpacePK comp_id, Integer createdBy, Date dateCreated, String relationshipParentToChild, String relationshipChildToParent, String recordStatus, String parentSpaceType, String childSpaceType) {
       this.comp_id = comp_id;
       this.createdBy = createdBy;
       this.dateCreated = dateCreated;
       this.relationshipParentToChild = relationshipParentToChild;
       this.relationshipChildToParent = relationshipChildToParent;
       this.recordStatus = recordStatus;
       this.parentSpaceType = parentSpaceType;
       this.childSpaceType = childSpaceType;
    }
   
     @EmbeddedId
    @AttributeOverrides( {
        @AttributeOverride(name="parentSpaceId", column=@Column(name="PARENT_SPACE_ID", nullable=false, length=20) ), 
        @AttributeOverride(name="childSpaceId", column=@Column(name="CHILD_SPACE_ID", nullable=false, length=20) ) } )
    public PnSpaceHasSpacePK getComp_id() {
        return this.comp_id;
    }
    
    public void setComp_id(PnSpaceHasSpacePK comp_id) {
        this.comp_id = comp_id;
    }

    
    @Column(name="CREATED_BY", length=20)
    public Integer getCreatedBy() {
        return this.createdBy;
    }
    
    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    
    @Column(name="DATE_CREATED", length=7)
    public Date getDateCreated() {
        return this.dateCreated;
    }
    
    public void setDateCreated(Date dateCreated) {
        this.dateCreated = dateCreated;
    }

    
    @Column(name="RELATIONSHIP_PARENT_TO_CHILD", length=80)
    public String getRelationshipParentToChild() {
        return this.relationshipParentToChild;
    }
    
    public void setRelationshipParentToChild(String relationshipParentToChild) {
        this.relationshipParentToChild = relationshipParentToChild;
    }

    
    @Column(name="RELATIONSHIP_CHILD_TO_PARENT", length=80)
    public String getRelationshipChildToParent() {
        return this.relationshipChildToParent;
    }
    
    public void setRelationshipChildToParent(String relationshipChildToParent) {
        this.relationshipChildToParent = relationshipChildToParent;
    }

    
    @Column(name="RECORD_STATUS", nullable=false, length=1)
    public String getRecordStatus() {
        return this.recordStatus;
    }
    
    public void setRecordStatus(String recordStatus) {
        this.recordStatus = recordStatus;
    }

    
    @Column(name="PARENT_SPACE_TYPE", length=40)
    public String getParentSpaceType() {
        return this.parentSpaceType;
    }
    
    public void setParentSpaceType(String parentSpaceType) {
        this.parentSpaceType = parentSpaceType;
    }

    
    @Column(name="CHILD_SPACE_TYPE", length=40)
    public String getChildSpaceType() {
        return this.childSpaceType;
    }
    
    public void setChildSpaceType(String childSpaceType) {
        this.childSpaceType = childSpaceType;
    }

    public String toString() {
        return new ToStringBuilder(this)
            .append("comp_id", getComp_id())
            .toString();
    }

    public boolean equals(Object other) {
        if ( (this == other ) ) return true;
        if ( !(other instanceof PnSpaceHasSpace) ) return false;
        PnSpaceHasSpace castOther = (PnSpaceHasSpace) other;
        return new EqualsBuilder()
            .append(this.getComp_id(), castOther.getComp_id())
            .isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder()
            .append(getComp_id())
            .toHashCode();
    }

	/**
	 * @return the pnObject
	 */
    @ManyToOne(fetch = FetchType.LAZY, targetEntity = PnObject.class)
    @JoinColumn(name = "CHILD_SPACE_ID", insertable = false, updatable = false)
	public PnObject getPnObject() {
		return pnObject;
	}

	/**
	 * @param pnObject the pnObject to set
	 */
	public void setPnObject(PnObject pnObject) {
		this.pnObject = pnObject;
	}
}
