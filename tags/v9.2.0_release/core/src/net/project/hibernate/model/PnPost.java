/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnPost generated by hbm2java
 */
@Entity
@Table(name = "PN_POST")
public class PnPost implements Serializable {

	private PnPostPK comp_id;

	private String subject;

	private Date datePosted;

	private Integer parentId;

	private Integer urgencyId;

	private String recordStatus;

	private PnObject pnObject;

	private PnDiscussionGroup pnDiscussionGroup;

	private PnPerson pnPerson;

	private Set pnPostHistories = new HashSet(0);

	private Set pnPostReaders = new HashSet(0);

	private PnPostBodyClob pnPostBodyClob;

	public PnPost() {
	}

	public PnPost(PnPostPK comp_id, String subject, Date datePosted, Integer urgencyId, String recordStatus) {
		this.comp_id = comp_id;
		this.subject = subject;
		this.datePosted = datePosted;
		this.urgencyId = urgencyId;
		this.recordStatus = recordStatus;
	}

	public PnPost(net.project.hibernate.model.PnPostPK comp_id, String subject, Date datePosted, Integer urgencyId,
			String recordStatus, net.project.hibernate.model.PnPerson pnPerson,
			net.project.hibernate.model.PnPostBodyClob pnPostBodyClob, Set pnPostHistories, Set pnPostReaders) {
		this.comp_id = comp_id;
		this.subject = subject;
		this.datePosted = datePosted;
		this.urgencyId = urgencyId;
		this.recordStatus = recordStatus;
		this.pnPerson = pnPerson;
		this.pnPostBodyClob = pnPostBodyClob;
		this.pnPostHistories = pnPostHistories;
		this.pnPostReaders = pnPostReaders;
	}

	public PnPost(net.project.hibernate.model.PnPostPK comp_id, String subject, Date datePosted, Integer parentId,
			Integer urgencyId, String recordStatus, net.project.hibernate.model.PnObject pnObject,
			net.project.hibernate.model.PnDiscussionGroup pnDiscussionGroup,
			net.project.hibernate.model.PnPerson pnPerson, net.project.hibernate.model.PnPostBodyClob pnPostBodyClob,
			Set pnPostHistories, Set pnPostReaders) {
		this.comp_id = comp_id;
		this.subject = subject;
		this.datePosted = datePosted;
		this.parentId = parentId;
		this.urgencyId = urgencyId;
		this.recordStatus = recordStatus;
		this.pnObject = pnObject;
		this.pnDiscussionGroup = pnDiscussionGroup;
		this.pnPerson = pnPerson;
		this.pnPostBodyClob = pnPostBodyClob;
		this.pnPostHistories = pnPostHistories;
		this.pnPostReaders = pnPostReaders;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "postId", column = @Column(name = "POST_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "discussionGroupId", column = @Column(name = "DISCUSSION_GROUP_ID", nullable = false, length = 20)) })
	public PnPostPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnPostPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "SUBJECT", nullable = false, length = 256)
	public String getSubject() {
		return this.subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	@Column(name = "DATE_POSTED", nullable = false, length = 7)
	public Date getDatePosted() {
		return this.datePosted;
	}

	public void setDatePosted(Date datePosted) {
		this.datePosted = datePosted;
	}

	@Column(name = "PARENT_ID", length = 20)
	public Integer getParentId() {
		return this.parentId;
	}

	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}

	@Column(name = "URGENCY_ID", nullable = false, length = 20)
	public Integer getUrgencyId() {
		return this.urgencyId;
	}

	public void setUrgencyId(Integer urgencyId) {
		this.urgencyId = urgencyId;
	}

	@Column(name = "RECORD_STATUS", nullable = false, length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	//@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnObject.class)
	//@JoinColumn(name = "POST_ID", insertable = false, updatable = false)
	@Transient
	public PnObject getPnObject() {
		return this.pnObject;
	}

	public void setPnObject(PnObject pnObject) {
		this.pnObject = pnObject;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnDiscussionGroup.class)
	@JoinColumn(name = "DISCUSSION_GROUP_ID", insertable = false, updatable = false)
	public PnDiscussionGroup getPnDiscussionGroup() {
		return this.pnDiscussionGroup;
	}

	public void setPnDiscussionGroup(PnDiscussionGroup pnDiscussionGroup) {
		this.pnDiscussionGroup = pnDiscussionGroup;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPerson.class)
	@JoinColumn(name = "PERSON_ID")
	public PnPerson getPnPerson() {
		return this.pnPerson;
	}

	public void setPnPerson(PnPerson pnPerson) {
		this.pnPerson = pnPerson;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnPost", targetEntity = PnPostHistory.class)
	@Transient
	public Set getPnPostHistories() {
		return this.pnPostHistories;
	}

	public void setPnPostHistories(Set pnPostHistories) {
		this.pnPostHistories = pnPostHistories;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnPost", targetEntity = PnPostReader.class)
	@Transient
	public Set getPnPostReaders() {
		return this.pnPostReaders;
	}

	public void setPnPostReaders(Set pnPostReaders) {
		this.pnPostReaders = pnPostReaders;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPostBodyClob.class)
	@JoinColumn(name = "POST_BODY_ID")
	public PnPostBodyClob getPnPostBodyClob() {
		return this.pnPostBodyClob;
	}

	public void setPnPostBodyClob(PnPostBodyClob pnPostBodyClob) {
		this.pnPostBodyClob = pnPostBodyClob;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnPost))
			return false;
		PnPost castOther = (PnPost) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
