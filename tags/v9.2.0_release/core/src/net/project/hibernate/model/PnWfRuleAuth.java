/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnWfRuleAuth generated by hbm2java
 */
@Entity
@Table(name = "PN_WF_RULE_AUTH")
public class PnWfRuleAuth implements Serializable {

	private PnWfRuleAuthPK comp_id;

	private Date crc;

	private String recordStatus;

	private PnWorkflowRule pnWorkflowRule;

	private Set pnWfRuleAuthHasGroups = new HashSet(0);

	public PnWfRuleAuth() {
	}

	public PnWfRuleAuth(net.project.hibernate.model.PnWfRuleAuthPK comp_id, Date crc, String recordStatus,
			Set pnWfRuleAuthHasGroups) {
		this.comp_id = comp_id;
		this.crc = crc;
		this.recordStatus = recordStatus;
		this.pnWfRuleAuthHasGroups = pnWfRuleAuthHasGroups;
	}

	public PnWfRuleAuth(net.project.hibernate.model.PnWfRuleAuthPK comp_id, Date crc, String recordStatus,
			net.project.hibernate.model.PnWorkflowRule pnWorkflowRule, Set pnWfRuleAuthHasGroups) {
		this.comp_id = comp_id;
		this.crc = crc;
		this.recordStatus = recordStatus;
		this.pnWorkflowRule = pnWorkflowRule;
		this.pnWfRuleAuthHasGroups = pnWfRuleAuthHasGroups;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "ruleId", column = @Column(name = "RULE_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "workflowId", column = @Column(name = "WORKFLOW_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "transitionId", column = @Column(name = "TRANSITION_ID", nullable = false, length = 20)) })
	public PnWfRuleAuthPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnWfRuleAuthPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "CRC", nullable = false, length = 7)
	public Date getCrc() {
		return this.crc;
	}

	public void setCrc(Date crc) {
		this.crc = crc;
	}

	@Column(name = "RECORD_STATUS", nullable = false, length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	@OneToOne(fetch = FetchType.LAZY, targetEntity=PnWorkflowRule.class)
	public PnWorkflowRule getPnWorkflowRule() {
		return this.pnWorkflowRule;
	}

	public void setPnWorkflowRule(PnWorkflowRule pnWorkflowRule) {
		this.pnWorkflowRule = pnWorkflowRule;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnWfRuleAuth", targetEntity = PnWfRuleAuthHasGroup.class)
	@Transient
	public Set getPnWfRuleAuthHasGroups() {
		return this.pnWfRuleAuthHasGroups;
	}

	public void setPnWfRuleAuthHasGroups(Set pnWfRuleAuthHasGroups) {
		this.pnWfRuleAuthHasGroups = pnWfRuleAuthHasGroups;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnWfRuleAuth))
			return false;
		PnWfRuleAuth castOther = (PnWfRuleAuth) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
