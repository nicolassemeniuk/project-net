/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnPostHistory generated by hbm2java
 */
@Entity
@Table(name = "PN_POST_HISTORY")
public class PnPostHistory implements Serializable {

	private PnPostHistoryPK comp_id;

	private String actionComment;

	private Date actionDate;

	private String actionName;

	private PnPost pnPost;

	private PnPerson pnPerson;

	private PnPostActionLookup pnPostActionLookup;

	public PnPostHistory() {
	}

	public PnPostHistory(PnPostHistoryPK comp_id) {
		this.comp_id = comp_id;
	}

	public PnPostHistory(net.project.hibernate.model.PnPostHistoryPK comp_id,
			net.project.hibernate.model.PnPerson pnPerson,
			net.project.hibernate.model.PnPostActionLookup pnPostActionLookup) {
		this.comp_id = comp_id;
		this.pnPerson = pnPerson;
		this.pnPostActionLookup = pnPostActionLookup;
	}

	public PnPostHistory(PnPostHistoryPK comp_id, String actionComment, Date actionDate, String actionName,
			PnPost pnPost, PnPerson pnPerson, PnPostActionLookup pnPostActionLookup) {
		this.comp_id = comp_id;
		this.actionComment = actionComment;
		this.actionDate = actionDate;
		this.actionName = actionName;
		this.pnPost = pnPost;
		this.pnPerson = pnPerson;
		this.pnPostActionLookup = pnPostActionLookup;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "postId", column = @Column(name = "POST_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "discussionGroupId", column = @Column(name = "DISCUSSION_GROUP_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "postHistoryId", column = @Column(name = "POST_HISTORY_ID", nullable = false, length = 20)) })
	public PnPostHistoryPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnPostHistoryPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "ACTION_COMMENT")
	public String getActionComment() {
		return this.actionComment;
	}

	public void setActionComment(String actionComment) {
		this.actionComment = actionComment;
	}

	@Column(name = "ACTION_DATE", length = 7)
	public Date getActionDate() {
		return this.actionDate;
	}

	public void setActionDate(Date actionDate) {
		this.actionDate = actionDate;
	}

	@Column(name = "ACTION_NAME", length = 80)
	public String getActionName() {
		return this.actionName;
	}

	public void setActionName(String actionName) {
		this.actionName = actionName;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPost.class)
	@JoinColumns( {
			@JoinColumn(name = "POST_ID", referencedColumnName = "POST_ID", insertable = false, updatable = false),
			@JoinColumn(name = "DISCUSSION_GROUP_ID", referencedColumnName = "DISCUSSION_GROUP_ID", insertable = false, updatable = false) })
	public PnPost getPnPost() {
		return this.pnPost;
	}

	public void setPnPost(PnPost pnPost) {
		this.pnPost = pnPost;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPerson.class)
	@JoinColumn(name = "ACTION_BY_ID")
	public PnPerson getPnPerson() {
		return this.pnPerson;
	}

	public void setPnPerson(PnPerson pnPerson) {
		this.pnPerson = pnPerson;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPostActionLookup.class)
	@JoinColumn(name = "ACTION")
	public PnPostActionLookup getPnPostActionLookup() {
		return this.pnPostActionLookup;
	}

	public void setPnPostActionLookup(PnPostActionLookup pnPostActionLookup) {
		this.pnPostActionLookup = pnPostActionLookup;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnPostHistory))
			return false;
		PnPostHistory castOther = (PnPostHistory) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
