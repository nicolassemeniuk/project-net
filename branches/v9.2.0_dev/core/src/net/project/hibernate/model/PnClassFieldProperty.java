/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnClassFieldProperty generated by hbm2java
 */
@Entity
@Table(name = "PN_CLASS_FIELD_PROPERTY")
public class PnClassFieldProperty implements java.io.Serializable {

	/** identifier field */
	private PnClassFieldPropertyPK comp_id;

	/** nullable persistent field */
	private String propertyType;

	/** nullable persistent field */
	private String value;

	/** nullable persistent field */
	private PnClientType pnClientType;

	public PnClassFieldProperty() {
	}

	public PnClassFieldProperty(PnClassFieldPropertyPK comp_id) {
		this.comp_id = comp_id;
	}

	public PnClassFieldProperty(PnClassFieldPropertyPK comp_id, String propertyType, String value,
			PnClientType pnClientType) {
		this.comp_id = comp_id;
		this.propertyType = propertyType;
		this.value = value;
		this.pnClientType = pnClientType;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "classId", column = @Column(name = "CLASS_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "fieldId", column = @Column(name = "FIELD_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "property", column = @Column(name = "PROPERTY", nullable = false, length = 80)),
			@AttributeOverride(name = "clientTypeId", column = @Column(name = "CLIENT_TYPE_ID", nullable = false, length = 20)) })
	public PnClassFieldPropertyPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnClassFieldPropertyPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "PROPERTY_TYPE", length = 80)
	public String getPropertyType() {
		return this.propertyType;
	}

	public void setPropertyType(String propertyType) {
		this.propertyType = propertyType;
	}

	@Column(name = "VALUE", length = 80)
	public String getValue() {
		return this.value;
	}

	public void setValue(String value) {
		this.value = value;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnClientType.class)
	@JoinColumn(name = "CLIENT_TYPE_ID", insertable = false, updatable = false)
	public PnClientType getPnClientType() {
		return this.pnClientType;
	}

	public void setPnClientType(PnClientType pnClientType) {
		this.pnClientType = pnClientType;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnClassFieldProperty))
			return false;
		PnClassFieldProperty castOther = (PnClassFieldProperty) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}
}
