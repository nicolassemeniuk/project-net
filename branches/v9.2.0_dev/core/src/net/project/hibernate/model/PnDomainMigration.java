/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.sql.Clob;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnDomainMigration generated by hbm2java
 */
@Entity
@Table(name = "PN_DOMAIN_MIGRATION")
public class PnDomainMigration implements java.io.Serializable {

	/** identifier field */
	private Integer domainMigrationId;

	/** nullable persistent field */
	private Clob adminMessageClob;

	/** persistent field */
	private PnUserDomain pnUserDomainByToDomain;

	/** persistent field */
	private PnUserDomain pnUserDomainByFromDomain;

	/** persistent field */
	private Set pnUserDomainMigrations = new HashSet(0);

	public PnDomainMigration() {
	}

	public PnDomainMigration(Integer domainMigrationId) {
		this.domainMigrationId = domainMigrationId;
	}

	public PnDomainMigration(Integer domainMigrationId, Clob adminMessageClob, PnUserDomain pnUserDomainByToDomain,
			PnUserDomain pnUserDomainByFromDomain, Set pnUserDomainMigrations) {
		this.domainMigrationId = domainMigrationId;
		this.adminMessageClob = adminMessageClob;
		this.pnUserDomainByToDomain = pnUserDomainByToDomain;
		this.pnUserDomainByFromDomain = pnUserDomainByFromDomain;
		this.pnUserDomainMigrations = pnUserDomainMigrations;
	}

	/** minimal constructor */
	public PnDomainMigration(Integer domainMigrationId,
			net.project.hibernate.model.PnUserDomain pnUserDomainByToDomain,
			net.project.hibernate.model.PnUserDomain pnUserDomainByFromDomain, Set pnUserDomainMigrations) {
		this.domainMigrationId = domainMigrationId;
		this.pnUserDomainByToDomain = pnUserDomainByToDomain;
		this.pnUserDomainByFromDomain = pnUserDomainByFromDomain;
		this.pnUserDomainMigrations = pnUserDomainMigrations;
	}

	@Id
	@Column(name = "DOMAIN_MIGRATION_ID", nullable = false)
	public Integer getDomainMigrationId() {
		return this.domainMigrationId;
	}

	public void setDomainMigrationId(Integer domainMigrationId) {
		this.domainMigrationId = domainMigrationId;
	}

	@Column(name = "ADMIN_MESSAGE_CLOB", length = 4000)
	public Clob getAdminMessageClob() {
		return this.adminMessageClob;
	}

	public void setAdminMessageClob(Clob adminMessageClob) {
		this.adminMessageClob = adminMessageClob;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnUserDomain.class)
	@JoinColumn(name = "TO_DOMAIN")
	public PnUserDomain getPnUserDomainByToDomain() {
		return this.pnUserDomainByToDomain;
	}

	public void setPnUserDomainByToDomain(PnUserDomain pnUserDomainByToDomain) {
		this.pnUserDomainByToDomain = pnUserDomainByToDomain;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnUserDomain.class)
	@JoinColumn(name = "FROM_DOMAIN")
	public PnUserDomain getPnUserDomainByFromDomain() {
		return this.pnUserDomainByFromDomain;
	}

	public void setPnUserDomainByFromDomain(PnUserDomain pnUserDomainByFromDomain) {
		this.pnUserDomainByFromDomain = pnUserDomainByFromDomain;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnDomainMigration", targetEntity = PnUserDomainMigration.class)
	@Transient
	public Set getPnUserDomainMigrations() {
		return this.pnUserDomainMigrations;
	}

	public void setPnUserDomainMigrations(Set pnUserDomainMigrations) {
		this.pnUserDomainMigrations = pnUserDomainMigrations;
	}

	public String toString() {
		return new ToStringBuilder(this).append("domainMigrationId", getDomainMigrationId()).toString();
	}

}
