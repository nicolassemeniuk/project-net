/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
*/

 /*--------------------------------------------------------------------------------------+
|
|    $RCSfile$
|   $Revision: 18397 $
|       $Date: 2008-11-21 10:47:28 -0200 (vie, 21 nov 2008) $
|     $Author: umesha $
|
+--------------------------------------------------------------------------------------*/
package net.project.base.finder;

import java.util.Iterator;

import net.project.util.VisitException;

/**
 * This filter represents a list of options that should be displayed as radio
 * buttons.  To use this filter, add one or more <code>FinderFilter</code> objects
 * to this object.  They will be renders as a bunch of radio buttons.

 * The WHERE clause generated by this filter currently supports multiple
 * filters having been selected.  These are <code>ANd</code>ed together.
 *
 * @author Matthew Flower
 * @since Version 7.4
 */
public class RadioButtonFilter extends FinderFilterList {
    /**
     * Creates a new RadioButtonFilter with the specified id.
     *
     * @param id a unique identifier for this finder filter in the context of
     * a FinderFilterList.  If you are creating a list of filters in one of your
     * objects, each ID should be unique so the update method can find your
     * filters easily.  (Also, that class won't allow two filters with the same
     * ID to be added.)
     */
    public RadioButtonFilter(String id) {
        super(id, FilterOperator.AND);
    }

    public void accept(IFinderIngredientVisitor visitor) throws VisitException {
        visitor.visitRadioButtonFilter(this);
    }

    public String getFilterDescription() {
        StringBuffer filterDescription = new StringBuffer();

        for (Iterator it = getAllFilters().iterator(); it.hasNext();) {
            FinderFilter finderFilter = (FinderFilter)it.next();
            if (finderFilter.isSelected()) {
                filterDescription.append(finderFilter.getFilterDescription());
            }
        }

        return filterDescription.toString();
    }
}
