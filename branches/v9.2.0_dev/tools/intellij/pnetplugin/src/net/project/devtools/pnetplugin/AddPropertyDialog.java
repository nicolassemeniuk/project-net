/*-------------------------
 * (c)2002 Matthew Flower
 * All rights reserved
 *-------------------------*/
package net.project.devtools.pnetplugin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * This class creates the dialog box for adding a property to the database.
 *
 * @author Matthew Flower
 * @since Version 0.2
 */
public class AddPropertyDialog extends javax.swing.JDialog {
    private Settings settings;
    private boolean modifyMode = false;
    private String originalPropertyName;

    /** Creates new form AddPropertyDialog */
    public AddPropertyDialog(java.awt.Frame parent, boolean modal, Settings settings) {
        super(parent, modal);
        this.settings = settings;
        initComponents();
        property.requestFocusInWindow();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        languageLabel = new javax.swing.JLabel();
        languageDropdown = new javax.swing.JComboBox();
        propertyTypeLabel = new javax.swing.JLabel();
        propertyType = new javax.swing.JComboBox();
        propertyLabel = new javax.swing.JLabel();
        property = new javax.swing.JTextField();
        property.requestFocus();
        propertyValueLabel = new javax.swing.JLabel();
        propertyValue = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                hide();
            }
        });

        statusLabel = new javax.swing.JLabel();
        buttonGroup = new javax.swing.ButtonGroup();
        translateableLabel = new javax.swing.JLabel();
        translateableTrue = new javax.swing.JRadioButton("True");
        translateableFalse = new javax.swing.JRadioButton("False");

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        languageLabel.setLabelFor(languageDropdown);
        languageLabel.setText("Language");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(languageLabel, gridBagConstraints);

        languageDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "English (EN)" }));
        languageDropdown.setName("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(languageDropdown, gridBagConstraints);

        propertyTypeLabel.setLabelFor(propertyType);
        propertyTypeLabel.setText("Property Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(propertyTypeLabel, gridBagConstraints);

        propertyType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "text", "href", "imagepath", "boolean", "css", "largetext" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(propertyType, gridBagConstraints);

        propertyLabel.setLabelFor(property);
        propertyLabel.setText("Property");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(propertyLabel, gridBagConstraints);

        property.setMinimumSize(new java.awt.Dimension(200, 20));
        property.setPreferredSize(new java.awt.Dimension(300, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(property, gridBagConstraints);

        propertyValueLabel.setLabelFor(propertyValue);
        propertyValueLabel.setText("Property Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(propertyValueLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(propertyValue, gridBagConstraints);

        translateableLabel.setLabelFor(translateableTrue);
        translateableLabel.setText("Translateable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(translateableLabel, gridBagConstraints);

        buttonGroup.add(translateableTrue);
        buttonGroup.add(translateableFalse);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        JPanel translateablePanel = new JPanel();

        translateablePanel.setLayout(new FlowLayout());
        translateablePanel.add(translateableTrue);
        translateablePanel.add(translateableFalse);
        getContentPane().add(translateablePanel, gridBagConstraints);

        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addButton);
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        statusLabel.setForeground(new java.awt.Color(0, 0, 153));
        statusLabel.setText("Please Enter a Token");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 35;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(statusLabel, gridBagConstraints);

        pack();

        property.requestFocus();
    }//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if (!(translateableTrue.isSelected() || translateableFalse.isSelected())) {
            JOptionPane.showMessageDialog(this, "You must select true or false for the translateable property.");
            return;
        }

        try {
            Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
            Connection connection = java.sql.DriverManager.getConnection(settings.database,
                settings.dbUserName, settings.dbPassword);
            Connection ccConnection = null;
            if (settings.ccDatabase != null && settings.ccDatabase.length() > 0) {
                ccConnection = java.sql.DriverManager.getConnection(settings.ccDatabase,
                settings.dbUserName, settings.dbPassword);
            }
            try {
                if (!modifyMode || !propertyExists(connection, property.getText())) {
                    addProperty(connection);
                    if (ccConnection != null) {
                        addProperty(ccConnection);
                    }
                    statusLabel.setText("Token added.  Please enter another or hit cancel.");
                } else {
                    if (originalPropertyName == null || originalPropertyName.trim().length() == 0) {
                        originalPropertyName = property.getText();
                    }

                    modifyProperty(connection);
                    if (ccConnection != null) {
                        modifyProperty(ccConnection);
                    }

                    statusLabel.setText("Token \""+originalPropertyName+"\"modified.  Please enter another or hit cancel.");
                    originalPropertyName = "";
                }

                propertyAdded = true;
                closeDialog(null);
            } finally {
                connection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected exception: " + e);
            statusLabel.setText("Unable to add token.");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void cancelButtonActionPerformed(ActionEvent evt) {
        closeDialog(null);        
    }

    private boolean propertyExists(Connection connection, String propertyName) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
            "select property from pn_property where property = ? "
        );
        ps.setString(1, propertyName);
        ResultSet rs = ps.executeQuery();

        return rs.next();
    }

    private void addProperty(Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
            "insert into pn_property " +
            "  (context_id, language, property_type, property, " +
            "   property_value, record_status, is_system_property, " +
            "   is_translatable_property) " +
            "values " +
            "  (?,?,?,?,?,?,?,?)"
        );
        ps.setInt(1, 2000);
        ps.setString(2, "en");
        ps.setString(3, (String)propertyType.getModel().getSelectedItem());
        ps.setString(4, property.getText());
        ps.setString(5, propertyValue.getText());
        ps.setString(6, "A");
        ps.setInt(7,0);
        ps.setInt(8,(translateableTrue.isSelected() ? 1 : 0));
        ps.executeUpdate();
    }

    private void modifyProperty(Connection connection) throws SQLException {
        PreparedStatement ps = connection.prepareStatement(
            "update pn_property " +
            "set property = ?, property_type = ?, property_value = ?, is_translatable_property = ? " +
            "where property = ?"
        );
        ps.setString(1, property.getText());
        ps.setString(2, (String)propertyType.getModel().getSelectedItem());
        ps.setString(3, propertyValue.getText());
        ps.setInt(4, (translateableTrue.isSelected() ? 1 : 0));
        ps.setString(5, originalPropertyName);

        ps.executeUpdate();
    }

    public void setPropertyValueFromDB(String propertyName) {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
            Connection connection = java.sql.DriverManager.getConnection(settings.database,
                settings.dbUserName, settings.dbPassword);

            try {
                PreparedStatement ps = connection.prepareStatement(
                    "select property_value, is_translatable_property from pn_property " +
                    "where property = ?"
                );
                ps.setString(1, propertyName);
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    propertyValue.setText(rs.getString("property_value"));
                    if (rs.getBoolean("is_translatable_property")) {
                        translateableTrue.setSelected(true);
                        translateableFalse.setSelected(false);
                    } else {
                        translateableTrue.setSelected(false);
                        translateableFalse.setSelected(true);
                    }
                }
            } finally {
                connection.close();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected exception: " + e);
            statusLabel.setText("Unable to add token.");
        }
    }

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    public void setPropertyName(String propertyName) {
        property.setText(propertyName);
        originalPropertyName = propertyName;
    }

    public void setPropertyValueToInsert(String propertyToInsert) {
        propertyValue.setText(propertyToInsert);
    }

    public String getAddedProperty() {
        return property.getText();
    }

    public String getAddedPropertyValue() {
        return propertyValue.getText();
    }

    public boolean isModifyMode() {
        return modifyMode;
    }

    public void setModifyMode(boolean modifyMode) {
        this.modifyMode = modifyMode;

        if (modifyMode) {
            propertyValue.selectAll();
            propertyValue.requestFocus();
            addButton.setText("Modify");
        } else {
            property.requestFocus();
            addButton.setText("Add");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new AddPropertyDialog(new javax.swing.JFrame(), true, null).show();
    }


    public boolean propertyAdded = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel propertyValueLabel;
    private javax.swing.JTextField propertyValue;
    private javax.swing.JLabel propertyLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JComboBox propertyType;
    private javax.swing.JLabel propertyTypeLabel;
    private javax.swing.JTextField property;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox languageDropdown;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton addButton;
    private javax.swing.JLabel languageLabel;
    private javax.swing.JLabel translateableLabel;
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JRadioButton translateableTrue;
    private javax.swing.JRadioButton translateableFalse;
    // End of variables declaration//GEN-END:variables

}
