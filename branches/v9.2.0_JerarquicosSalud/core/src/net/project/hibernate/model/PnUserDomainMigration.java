/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnUserDomainMigration generated by hbm2java
 */
@Entity
@Table(name = "PN_USER_DOMAIN_MIGRATION")
public class PnUserDomainMigration implements Serializable {

	private PnUserDomainMigrationPK comp_id;

	private int migrationStatusId;

	private Date activityDate;

	private int isCurrent;

	private PnDomainMigration pnDomainMigration;

	private PnUser pnUser;

	public PnUserDomainMigration() {
	}

	public PnUserDomainMigration(PnUserDomainMigrationPK comp_id, int migrationStatusId, Date activityDate,
			int isCurrent) {
		this.comp_id = comp_id;
		this.migrationStatusId = migrationStatusId;
		this.activityDate = activityDate;
		this.isCurrent = isCurrent;
	}

	public PnUserDomainMigration(PnUserDomainMigrationPK comp_id, int migrationStatusId, Date activityDate,
			int isCurrent, PnDomainMigration pnDomainMigration, PnUser pnUser) {
		this.comp_id = comp_id;
		this.migrationStatusId = migrationStatusId;
		this.activityDate = activityDate;
		this.isCurrent = isCurrent;
		this.pnDomainMigration = pnDomainMigration;
		this.pnUser = pnUser;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "userId", column = @Column(name = "USER_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "domainMigrationId", column = @Column(name = "DOMAIN_MIGRATION_ID", nullable = false, length = 20)) })
	public PnUserDomainMigrationPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnUserDomainMigrationPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "MIGRATION_STATUS_ID", nullable = false, length = 3)
	public int getMigrationStatusId() {
		return this.migrationStatusId;
	}

	public void setMigrationStatusId(int migrationStatusId) {
		this.migrationStatusId = migrationStatusId;
	}

	@Column(name = "ACTIVITY_DATE", nullable = false, length = 7)
	public Date getActivityDate() {
		return this.activityDate;
	}

	public void setActivityDate(Date activityDate) {
		this.activityDate = activityDate;
	}

	@Column(name = "IS_CURRENT", nullable = false, length = 1)
	public int getIsCurrent() {
		return this.isCurrent;
	}

	public void setIsCurrent(int isCurrent) {
		this.isCurrent = isCurrent;
	}

	//@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnDomainMigration.class)
	//@JoinColumn(name = "DOMAIN_MIGRATION_ID", insertable = false, updatable = false)
	@Transient
	public PnDomainMigration getPnDomainMigration() {
		return this.pnDomainMigration;
	}

	public void setPnDomainMigration(PnDomainMigration pnDomainMigration) {
		this.pnDomainMigration = pnDomainMigration;
	}

	//@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnUser.class)
	//@JoinColumn(name = "USER_ID", insertable = false, updatable = false)
	@Transient
	public PnUser getPnUser() {
		return this.pnUser;
	}

	public void setPnUser(PnUser pnUser) {
		this.pnUser = pnUser;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnUserDomainMigration))
			return false;
		PnUserDomainMigration castOther = (PnUserDomainMigration) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
