/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnElementProperty generated by hbm2java
 */
@Entity
@Table(name = "PN_ELEMENT_PROPERTY")
public class PnElementProperty implements java.io.Serializable {

	private PnElementPropertyPK comp_id;

	/** persistent field */
	private String property;

	/** nullable persistent field */
	private String propertyType;

	/** nullable persistent field */
	private String defaultValue;

	/** nullable persistent field */
	private String maxValue;

	/** nullable persistent field */
	private String propertyLabel;

	/** nullable persistent field */
	private String minValue;

	/** persistent field */
	private int isUserChangable;

	/** nullable persistent field */
	private PnElement pnElement;

	private PnClientType pnClientType;

	public PnElementProperty() {
	}

	public PnElementProperty(PnElementPropertyPK comp_id, String property, int isUserChangable) {
		this.comp_id = comp_id;
		this.property = property;
		this.isUserChangable = isUserChangable;
	}

	public PnElementProperty(PnElementPropertyPK comp_id, String property, String propertyType, String defaultValue,
			String maxValue, String propertyLabel, String minValue, int isUserChangable, PnElement pnElement,
			PnClientType pnClientType) {
		this.comp_id = comp_id;
		this.property = property;
		this.propertyType = propertyType;
		this.defaultValue = defaultValue;
		this.maxValue = maxValue;
		this.propertyLabel = propertyLabel;
		this.minValue = minValue;
		this.isUserChangable = isUserChangable;
		this.pnElement = pnElement;
		this.pnClientType = pnClientType;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "elementId", column = @Column(name = "ELEMENT_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "propertyId", column = @Column(name = "PROPERTY_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "clientTypeId", column = @Column(name = "CLIENT_TYPE_ID", nullable = false, length = 20)) })
	public PnElementPropertyPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnElementPropertyPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "PROPERTY", nullable = false, length = 80)
	public String getProperty() {
		return this.property;
	}

	public void setProperty(String property) {
		this.property = property;
	}

	@Column(name = "PROPERTY_TYPE", length = 80)
	public String getPropertyType() {
		return this.propertyType;
	}

	public void setPropertyType(String propertyType) {
		this.propertyType = propertyType;
	}

	@Column(name = "DEFAULT_VALUE", length = 80)
	public String getDefaultValue() {
		return this.defaultValue;
	}

	public void setDefaultValue(String defaultValue) {
		this.defaultValue = defaultValue;
	}

	@Column(name = "MAX_VALUE", length = 80)
	public String getMaxValue() {
		return this.maxValue;
	}

	public void setMaxValue(String maxValue) {
		this.maxValue = maxValue;
	}

	@Column(name = "PROPERTY_LABEL", length = 80)
	public String getPropertyLabel() {
		return this.propertyLabel;
	}

	public void setPropertyLabel(String propertyLabel) {
		this.propertyLabel = propertyLabel;
	}

	@Column(name = "MIN_VALUE", length = 80)
	public String getMinValue() {
		return this.minValue;
	}

	public void setMinValue(String minValue) {
		this.minValue = minValue;
	}

	@Column(name = "IS_USER_CHANGABLE", nullable = false, length = 1)
	public int getIsUserChangable() {
		return this.isUserChangable;
	}

	public void setIsUserChangable(int isUserChangable) {
		this.isUserChangable = isUserChangable;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnElement.class)
	@JoinColumn(name = "ELEMENT_ID", insertable = false, updatable = false)
	public PnElement getPnElement() {
		return this.pnElement;
	}

	public void setPnElement(PnElement pnElement) {
		this.pnElement = pnElement;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnClientType.class)
	@JoinColumn(name = "CLIENT_TYPE_ID", insertable = false, updatable = false)
	public PnClientType getPnClientType() {
		return this.pnClientType;
	}

	public void setPnClientType(PnClientType pnClientType) {
		this.pnClientType = pnClientType;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnElementProperty))
			return false;
		PnElementProperty castOther = (PnElementProperty) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}
}
