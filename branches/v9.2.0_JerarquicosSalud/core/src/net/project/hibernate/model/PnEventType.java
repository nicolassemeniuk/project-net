/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnEventType generated by hbm2java
 */

@Entity
@Table(name = "PN_EVENT_TYPE")
public class PnEventType implements java.io.Serializable {

	/** identifier field */
	private Integer eventTypeId;

	/** nullable persistent field */
	private String name;

	/** nullable persistent field */
	private String description;

	/** nullable persistent field */
	private String recordStatus;

	/** nullable persistent field */
	private Date crc;

	private Set pnEventHasNotifications = new HashSet(0);

	private PnObjectType pnObjectType;

	public PnEventType() {
	}

	public PnEventType(Integer eventTypeId) {
		this.eventTypeId = eventTypeId;
	}

	public PnEventType(Integer eventTypeId, String name, String description, String recordStatus, Date crc,
			Set pnEventHasNotifications, PnObjectType pnObjectType) {
		this.eventTypeId = eventTypeId;
		this.name = name;
		this.description = description;
		this.recordStatus = recordStatus;
		this.crc = crc;
		this.pnEventHasNotifications = pnEventHasNotifications;
		this.pnObjectType = pnObjectType;
	}

	/** minimal constructor */
	public PnEventType(Integer eventTypeId, net.project.hibernate.model.PnObjectType pnObjectType,
			Set pnEventHasNotifications) {
		this.eventTypeId = eventTypeId;
		this.pnObjectType = pnObjectType;
		this.pnEventHasNotifications = pnEventHasNotifications;
	}

	@Id
	@Column(name = "EVENT_TYPE_ID", nullable = false)
	public Integer getEventTypeId() {
		return this.eventTypeId;
	}

	public void setEventTypeId(Integer eventTypeId) {
		this.eventTypeId = eventTypeId;
	}

	@Column(name = "NAME", length = 80)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "DESCRIPTION", length = 500)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "RECORD_STATUS", length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	@Column(name = "CRC", length = 7)
	public Date getCrc() {
		return this.crc;
	}

	public void setCrc(Date crc) {
		this.crc = crc;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnEventType", targetEntity = PnEventHasNotification.class)
	@Transient
	public Set getPnEventHasNotifications() {
		return this.pnEventHasNotifications;
	}

	public void setPnEventHasNotifications(Set pnEventHasNotifications) {
		this.pnEventHasNotifications = pnEventHasNotifications;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnObjectType.class)
	@JoinColumn(name = "OBJECT_TYPE")
	public PnObjectType getPnObjectType() {
		return this.pnObjectType;
	}

	public void setPnObjectType(PnObjectType pnObjectType) {
		this.pnObjectType = pnObjectType;
	}

	public String toString() {
		return new ToStringBuilder(this).append("eventTypeId", getEventTypeId()).toString();
	}

}
