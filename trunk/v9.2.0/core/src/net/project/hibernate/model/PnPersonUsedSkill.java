/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnPersonUsedSkill generated by hbm2java
 */
@Entity
@Table(name = "PN_PERSON_USED_SKILL")
public class PnPersonUsedSkill implements Serializable {

	private PnPersonUsedSkillPK comp_id;

	private Date startDate;

	private Date endDate;

	private String description;

	private PnPersonHasSkill pnPersonHasSkill;

	public PnPersonUsedSkill() {
	}

	public PnPersonUsedSkill(PnPersonUsedSkillPK comp_id) {
		this.comp_id = comp_id;
	}

	public PnPersonUsedSkill(PnPersonUsedSkillPK comp_id, Date startDate, Date endDate, String description,
			PnPersonHasSkill pnPersonHasSkill) {
		this.comp_id = comp_id;
		this.startDate = startDate;
		this.endDate = endDate;
		this.description = description;
		this.pnPersonHasSkill = pnPersonHasSkill;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "spaceId", column = @Column(name = "SPACE_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "personId", column = @Column(name = "PERSON_ID", nullable = false, length = 20)),
			@AttributeOverride(name = "skillId", column = @Column(name = "SKILL_ID", nullable = false, length = 20)) })
	public PnPersonUsedSkillPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(PnPersonUsedSkillPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "START_DATE", length = 7)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Column(name = "END_DATE", length = 7)
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	@Column(name = "DESCRIPTION", length = 500)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnPersonHasSkill.class)
	@JoinColumns( {
			@JoinColumn(name = "PERSON_ID", referencedColumnName = "PERSON_ID", insertable = false, updatable = false),
			@JoinColumn(name = "SKILL_ID", referencedColumnName = "SKILL_ID", insertable = false, updatable = false) })
	public PnPersonHasSkill getPnPersonHasSkill() {
		return this.pnPersonHasSkill;
	}

	public void setPnPersonHasSkill(PnPersonHasSkill pnPersonHasSkill) {
		this.pnPersonHasSkill = pnPersonHasSkill;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof PnPersonUsedSkill))
			return false;
		PnPersonUsedSkill castOther = (PnPersonUsedSkill) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
