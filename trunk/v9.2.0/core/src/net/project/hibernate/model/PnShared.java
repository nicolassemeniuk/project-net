/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
*/
package net.project.hibernate.model;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * PnShared generated by hbm2java
 */
@Entity
@Table(name="PN_SHARED"
)
public class PnShared implements Serializable {


     private PnSharedPK comp_id;
     private Integer importSpaceId;
     private Integer importedObjectId;
     private Integer exportSpaceId;
     private Integer exportContainerId;
     private Integer readOnly;
     private Integer traversed;

    public PnShared() {
    }
	
    public PnShared(PnSharedPK comp_id, Integer importSpaceId) {
        this.comp_id = comp_id;
        this.importSpaceId = importSpaceId;
    }

    public PnShared(PnSharedPK comp_id, Integer importSpaceId, Integer importedObjectId, Integer exportSpaceId, Integer exportContainerId, Integer readOnly, Integer traversed) {
       this.comp_id = comp_id;
       this.importSpaceId = importSpaceId;
       this.importedObjectId = importedObjectId;
       this.exportSpaceId = exportSpaceId;
       this.exportContainerId = exportContainerId;
       this.readOnly = readOnly;
       this.traversed = traversed;
    }
   
     @EmbeddedId
    @AttributeOverrides( {
        @AttributeOverride(name="exportedObjectId", column=@Column(name="EXPORTED_OBJECT_ID", nullable=false, length=20) ), 
        @AttributeOverride(name="importContainerId", column=@Column(name="IMPORT_CONTAINER_ID", nullable=false, length=20) ) } )
    public PnSharedPK getComp_id() {
        return this.comp_id;
    }
    
    public void setComp_id(PnSharedPK comp_id) {
        this.comp_id = comp_id;
    }

    
    @Column(name="IMPORT_SPACE_ID", nullable=false, length=20)
    public Integer getImportSpaceId() {
        return this.importSpaceId;
    }
    
    public void setImportSpaceId(Integer importSpaceId) {
        this.importSpaceId = importSpaceId;
    }

    
    @Column(name="IMPORTED_OBJECT_ID", length=20)
    public Integer getImportedObjectId() {
        return this.importedObjectId;
    }
    
    public void setImportedObjectId(Integer importedObjectId) {
        this.importedObjectId = importedObjectId;
    }

    
    @Column(name="EXPORT_SPACE_ID", length=20)
    public Integer getExportSpaceId() {
        return this.exportSpaceId;
    }
    
    public void setExportSpaceId(Integer exportSpaceId) {
        this.exportSpaceId = exportSpaceId;
    }

    
    @Column(name="EXPORT_CONTAINER_ID", length=20)
    public Integer getExportContainerId() {
        return this.exportContainerId;
    }
    
    public void setExportContainerId(Integer exportContainerId) {
        this.exportContainerId = exportContainerId;
    }

    
    @Column(name="READ_ONLY", length=1)
    public Integer getReadOnly() {
        return this.readOnly;
    }
    
    public void setReadOnly(Integer readOnly) {
        this.readOnly = readOnly;
    }

    
    @Column(name="TRAVERSED", length=22)
    public Integer getTraversed() {
        return this.traversed;
    }
    
    public void setTraversed(Integer traversed) {
        this.traversed = traversed;
    }

    public String toString() {
        return new ToStringBuilder(this)
            .append("comp_id", getComp_id())
            .toString();
    }

    public boolean equals(Object other) {
        if ( (this == other ) ) return true;
        if ( !(other instanceof PnShared) ) return false;
        PnShared castOther = (PnShared) other;
        return new EqualsBuilder()
            .append(this.getComp_id(), castOther.getComp_id())
            .isEquals();
    }

    public int hashCode() {
        return new HashCodeBuilder()
            .append(getComp_id())
            .toHashCode();
    }

}
