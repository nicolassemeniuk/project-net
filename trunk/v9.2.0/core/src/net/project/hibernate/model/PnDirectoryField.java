/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnDirectoryField generated by hbm2java
 */
@Entity
@Table(name = "PN_DIRECTORY_FIELD")
public class PnDirectoryField implements java.io.Serializable {

	/** identifier field */
	private Integer directoryFieldId;

	/** persistent field */
	private int isLocallyStored;

	/** nullable persistent field */
	private String directoryFieldName;

	/** nullable persistent field */
	private String pnPersonColumnName;

	/** persistent field */
	private String recordStatus;

	private Set pnSpaceHasDirectoryFields = new HashSet(0);

	private PnDirectory pnDirectory;

	public PnDirectoryField() {
	}

	public PnDirectoryField(Integer directoryFieldId, int isLocallyStored, String recordStatus) {
		this.directoryFieldId = directoryFieldId;
		this.isLocallyStored = isLocallyStored;
		this.recordStatus = recordStatus;
	}

	public PnDirectoryField(Integer directoryFieldId, int isLocallyStored, String directoryFieldName,
			String pnPersonColumnName, String recordStatus, Set pnSpaceHasDirectoryFields, PnDirectory pnDirectory) {
		this.directoryFieldId = directoryFieldId;
		this.isLocallyStored = isLocallyStored;
		this.directoryFieldName = directoryFieldName;
		this.pnPersonColumnName = pnPersonColumnName;
		this.recordStatus = recordStatus;
		this.pnSpaceHasDirectoryFields = pnSpaceHasDirectoryFields;
		this.pnDirectory = pnDirectory;
	}

	/** minimal constructor */
	public PnDirectoryField(Integer directoryFieldId, int isLocallyStored, String recordStatus,
			net.project.hibernate.model.PnDirectory pnDirectory, Set pnSpaceHasDirectoryFields) {
		this.directoryFieldId = directoryFieldId;
		this.isLocallyStored = isLocallyStored;
		this.recordStatus = recordStatus;
		this.pnDirectory = pnDirectory;
		this.pnSpaceHasDirectoryFields = pnSpaceHasDirectoryFields;
	}

	@Id
	@Column(name = "DIRECTORY_FIELD_ID", nullable = false)
	public Integer getDirectoryFieldId() {
		return this.directoryFieldId;
	}

	public void setDirectoryFieldId(Integer directoryFieldId) {
		this.directoryFieldId = directoryFieldId;
	}

	@Column(name = "IS_LOCALLY_STORED", nullable = false, length = 1)
	public int getIsLocallyStored() {
		return this.isLocallyStored;
	}

	public void setIsLocallyStored(int isLocallyStored) {
		this.isLocallyStored = isLocallyStored;
	}

	@Column(name = "DIRECTORY_FIELD_NAME")
	public String getDirectoryFieldName() {
		return this.directoryFieldName;
	}

	public void setDirectoryFieldName(String directoryFieldName) {
		this.directoryFieldName = directoryFieldName;
	}

	@Column(name = "PN_PERSON_COLUMN_NAME", length = 80)
	public String getPnPersonColumnName() {
		return this.pnPersonColumnName;
	}

	public void setPnPersonColumnName(String pnPersonColumnName) {
		this.pnPersonColumnName = pnPersonColumnName;
	}

	@Column(name = "RECORD_STATUS", nullable = false, length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnDirectoryField", targetEntity = PnSpaceHasDirectoryField.class)
	@Transient
	public Set getPnSpaceHasDirectoryFields() {
		return this.pnSpaceHasDirectoryFields;
	}

	public void setPnSpaceHasDirectoryFields(Set pnSpaceHasDirectoryFields) {
		this.pnSpaceHasDirectoryFields = pnSpaceHasDirectoryFields;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity = PnDirectory.class)
	@JoinColumn(name = "DIRECTORY_ID")
	public PnDirectory getPnDirectory() {
		return this.pnDirectory;
	}

	public void setPnDirectory(PnDirectory pnDirectory) {
		this.pnDirectory = pnDirectory;
	}

	public String toString() {
		return new ToStringBuilder(this).append("directoryFieldId", getDirectoryFieldId()).toString();
	}

}
