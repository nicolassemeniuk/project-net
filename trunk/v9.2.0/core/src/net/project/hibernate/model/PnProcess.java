/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * PnProcess generated by hbm2java
 */
@Entity
@Table(name = "PN_PROCESS")
public class PnProcess implements Serializable {

	private Integer processId;

	private String processName;

	private String processDesc;

	private String recordStatus;

	private PnObject pnObject;

	private Set pnSpaceHasProcesses = new HashSet(0);

	private Set pnPhases = new HashSet(0);

	private PnPhase pnPhase;

	private PnGate pnGate;

	public PnProcess() {
	}

	public PnProcess(Integer processId, String processName, String recordStatus) {
		this.processId = processId;
		this.processName = processName;
		this.recordStatus = recordStatus;
	}

	public PnProcess(Integer processId, String processName, String recordStatus,
			net.project.hibernate.model.PnPhase pnPhase, net.project.hibernate.model.PnGate pnGate,
			Set pnSpaceHasProcesses, Set pnPhases) {
		this.processId = processId;
		this.processName = processName;
		this.recordStatus = recordStatus;
		this.pnPhase = pnPhase;
		this.pnGate = pnGate;
		this.pnSpaceHasProcesses = pnSpaceHasProcesses;
		this.pnPhases = pnPhases;
	}

	public PnProcess(Integer processId, String processName, String processDesc, String recordStatus,
			net.project.hibernate.model.PnObject pnObject, net.project.hibernate.model.PnPhase pnPhase,
			net.project.hibernate.model.PnGate pnGate, Set pnSpaceHasProcesses, Set pnPhases) {
		this.processId = processId;
		this.processName = processName;
		this.processDesc = processDesc;
		this.recordStatus = recordStatus;
		this.pnObject = pnObject;
		this.pnPhase = pnPhase;
		this.pnGate = pnGate;
		this.pnSpaceHasProcesses = pnSpaceHasProcesses;
		this.pnPhases = pnPhases;
	}

	@Id
	@Column(name = "PROCESS_ID", nullable = false)
	public Integer getProcessId() {
		return this.processId;
	}

	public void setProcessId(Integer processId) {
		this.processId = processId;
	}

	@Column(name = "PROCESS_NAME", nullable = false, length = 80)
	public String getProcessName() {
		return this.processName;
	}

	public void setProcessName(String processName) {
		this.processName = processName;
	}

	@Column(name = "PROCESS_DESC", length = 500)
	public String getProcessDesc() {
		return this.processDesc;
	}

	public void setProcessDesc(String processDesc) {
		this.processDesc = processDesc;
	}

	@Column(name = "RECORD_STATUS", nullable = false, length = 1)
	public String getRecordStatus() {
		return this.recordStatus;
	}

	public void setRecordStatus(String recordStatus) {
		this.recordStatus = recordStatus;
	}

	//@OneToOne(fetch = FetchType.LAZY, targetEntity=PnObject.class)
	//@JoinColumn(name = "PROCESS_ID")
	@Transient
	public PnObject getPnObject() {
		return this.pnObject;
	}

	public void setPnObject(PnObject pnObject) {
		this.pnObject = pnObject;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnProcess", targetEntity = PnSpaceHasProcess.class)
	@Transient
	public Set getPnSpaceHasProcesses() {
		return this.pnSpaceHasProcesses;
	}

	public void setPnSpaceHasProcesses(Set pnSpaceHasProcesses) {
		this.pnSpaceHasProcesses = pnSpaceHasProcesses;
	}

	//@OneToMany(fetch = FetchType.LAZY, mappedBy = "pnProcess", targetEntity = PnPhase.class)
	@Transient
	public Set getPnPhases() {
		return this.pnPhases;
	}

	public void setPnPhases(Set pnPhases) {
		this.pnPhases = pnPhases;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity=PnPhase.class)
	@JoinColumn(name = "CURRENT_PHASE_ID")
	public PnPhase getPnPhase() {
		return this.pnPhase;
	}

	public void setPnPhase(PnPhase pnPhase) {
		this.pnPhase = pnPhase;
	}

	@ManyToOne(fetch = FetchType.LAZY, targetEntity=PnGate.class)
	@JoinColumn(name = "LAST_GATE_PASSED_ID")
	public PnGate getPnGate() {
		return this.pnGate;
	}

	public void setPnGate(PnGate pnGate) {
		this.pnGate = pnGate;
	}

	public String toString() {
		return new ToStringBuilder(this).append("processId", getProcessId()).toString();
	}

}
