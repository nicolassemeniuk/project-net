/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
package net.project.hibernate.model;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * QrtzSimpleTrigger generated by hbm2java
 */
@Entity
@Table(name = "QRTZ_SIMPLE_TRIGGERS")
public class QrtzSimpleTrigger implements Serializable {

	private QrtzSimpleTriggerPK comp_id;

	private int repeatCount;

	private long repeatInterval;

	private int timesTriggered;

	private QrtzTrigger qrtzTrigger;

	public QrtzSimpleTrigger() {
	}

	public QrtzSimpleTrigger(QrtzSimpleTriggerPK comp_id, int repeatCount, long repeatInterval, int timesTriggered) {
		this.comp_id = comp_id;
		this.repeatCount = repeatCount;
		this.repeatInterval = repeatInterval;
		this.timesTriggered = timesTriggered;
	}

	public QrtzSimpleTrigger(QrtzSimpleTriggerPK comp_id, int repeatCount, long repeatInterval, int timesTriggered,
			QrtzTrigger qrtzTrigger) {
		this.comp_id = comp_id;
		this.repeatCount = repeatCount;
		this.repeatInterval = repeatInterval;
		this.timesTriggered = timesTriggered;
		this.qrtzTrigger = qrtzTrigger;
	}

	@EmbeddedId
	@AttributeOverrides( {
			@AttributeOverride(name = "triggerName", column = @Column(name = "TRIGGER_NAME", nullable = false, length = 80)),
			@AttributeOverride(name = "triggerGroup", column = @Column(name = "TRIGGER_GROUP", nullable = false, length = 80)) })
	public QrtzSimpleTriggerPK getComp_id() {
		return this.comp_id;
	}

	public void setComp_id(QrtzSimpleTriggerPK comp_id) {
		this.comp_id = comp_id;
	}

	@Column(name = "REPEAT_COUNT", nullable = false, length = 7)
	public int getRepeatCount() {
		return this.repeatCount;
	}

	public void setRepeatCount(int repeatCount) {
		this.repeatCount = repeatCount;
	}

	@Column(name = "REPEAT_INTERVAL", nullable = false, length = 12)
	public long getRepeatInterval() {
		return this.repeatInterval;
	}

	public void setRepeatInterval(long repeatInterval) {
		this.repeatInterval = repeatInterval;
	}

	@Column(name = "TIMES_TRIGGERED", nullable = false, length = 7)
	public int getTimesTriggered() {
		return this.timesTriggered;
	}

	public void setTimesTriggered(int timesTriggered) {
		this.timesTriggered = timesTriggered;
	}

	//@OneToOne(fetch = FetchType.LAZY, targetEntity = QrtzTrigger.class)
	@Transient
	public QrtzTrigger getQrtzTrigger() {
		return this.qrtzTrigger;
	}

	public void setQrtzTrigger(QrtzTrigger qrtzTrigger) {
		this.qrtzTrigger = qrtzTrigger;
	}

	public String toString() {
		return new ToStringBuilder(this).append("comp_id", getComp_id()).toString();
	}

	public boolean equals(Object other) {
		if ((this == other))
			return true;
		if (!(other instanceof QrtzSimpleTrigger))
			return false;
		QrtzSimpleTrigger castOther = (QrtzSimpleTrigger) other;
		return new EqualsBuilder().append(this.getComp_id(), castOther.getComp_id()).isEquals();
	}

	public int hashCode() {
		return new HashCodeBuilder().append(getComp_id()).toHashCode();
	}

}
