/* 
 * Copyright 2000-2009 Project.net Inc.
 *
 * This file is part of Project.net.
 * Project.net is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * Project.net is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with Project.net.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
*/

 /*----------------------------------------------------------------------+
|
|    $RCSfile$
|   $Revision: 18397 $
|       $Date: 2008-11-21 10:47:28 -0200 (vie, 21 nov 2008) $
|     $Author: umesha $
|
|
+----------------------------------------------------------------------*/
package net.project.taglibs.navbar;

import javax.servlet.jsp.JspTagException;

import net.project.base.PnetException;
import net.project.gui.navbar.NavBarFeaturedItemFactory;
import net.project.gui.navbar.NavBarItem;

import org.apache.log4j.Logger;

/**
 * FeaturedMenuItemsTag implements a taglib that allows the user to indicate
 * certain tools that they'd like to appear in the left navigation bar.  For example,
 * let's say you have a really important form that does bug tracking.  By marking
 * that form as being a featured item, it will appear in the left navigation bar
 * like this:
 *
 * <pre>
 *   * Forms
 *     * BugTracking
 *   * etc.
 * </pre>
 * This expansion to the form functionality allows users to easily put important
 * forms at the top level so they can easily be seen when entering a space.
 *
 * Which class renders this tag differs based on the "type" variable of this
 * tag.  For example, if the type is <code>ObjectType.FORM</code> then this tag
 * will be rendered by the {@link net.project.taglibs.navbar.FeaturedMenuItemsTag}
 * class.  For a bit more detail, check out this class diagram:<br/>
 * <br/>
 * <img src="doc-files/FeaturedMenuItems.gif"/><br/>
 * <br/>
 * It shows the third class in this scenario {@link net.project.gui.navbar.NavBarFeaturedItemFactory}
 * which knows which class to instantiate.
 *
 * @author Matthew Flower
 * @version 1.0
 */
public class FeaturedMenuItemsTag extends NavBarTagItem {
    /** The space id for which we are going to generate submenu items **/
    private String spaceID;
    /** Type indicates what {@link net.project.base.ObjectType} we will try to
        load menu items for. **/
    private String type;
    /** URL indicates the base URL that we will link all these menu items to.
        Right now, the only implemented type (forms) appends &id=id to this **/
    private String url;
    /** This variable determine whether this tag will be processed or not.  It is
        set by the setDisplayIf() and setDisplayIfNot() methods **/
    private boolean displayThis = true;

    /**
     * Get the spaceID that we are going to generate featured items for.  This
     * variable is needed as we can only display featured menu items that this
     * space has available to it.
     *
     * @see #setSpaceID
     * @return The spaceID that we are going to generate featured items for.
     */
    public String getSpaceID() {
        return this.spaceID;
    }

    /**
     * Set the spaceID that we are going to generate featured items for.
     *
     * @see #getSpaceID
     * @param spaceID a <code>String</code> value containing the spaceID of
     * the space for which we will be generating featured items.
     */
    public void setSpaceID(String spaceID) {
        this.spaceID = spaceID;
    }
    
    /**
     * Gets the type of featured menu items that we'd like to generate.  Valid
     * types are listed in the {@link net.project.base.ObjectType} class.
     *
     * @see #setType
     * @return The object type of the featured menu items that we are going to
     * generate.
     */
    public String getType() {
        return this.type;
    }

    /**
     * Set the type of object that we are going to generate for the submenu items.
     *
     * @see #getType
     * @param argType The type of featured menu items that we are going to generate.
     * The list of valid object types are constants in {@link net.project.base.ObjectType}
     */
    public void setType(String argType) {
        this.type = argType;
    }

    /**
     * Gets the base url of the menu items that are going to be generated by this tag.
     * It seems that the objects that generate the menu will probably append
     * <code>&id={id}</code> to each url.
     *
     * @see #setUrl
     * @return The base url that featured menu items will point to.
     */
    public String getUrl() 
    {
        return this.url;
    }

    /**
     * Sets the base URL that the featured menu items will point to when clicked on.
     * Generally, <code>&id=id</code> will automatically be appended to this URL.
     *
     * @see #getUrl
     * @param argUrl The base URL that the featured menu items will point to.
     */
    public void setUrl(String argUrl) {
        this.url = argUrl;
    }

    /**
     * This method is defined by the Tag interface (which is implemented by
     * BodyTagSupport, our superclass.)  Do start tag runs after all the 
     * attributes are set and we are ready to process the tag.  
     *
     * @return
     * <ul>
     *   <li><code>EVAL_BODY_BUFFERED</code> is returned if we are going to
     *   look for subtags inside of the body of the tag.
     *   <li><code>SKIP_BODY</code> is returned if the insides aren't to be
     *   examined.</li>
     */
    public int doStartTag() throws JspTagException {
        if (displayThis) {
            //Add these featured objects to the subtree
            addFeaturedObjects();

            return EVAL_BODY_BUFFERED;
        } else {
            //Our display attributes have indicated that we shouldn't render this tag,
            //so skip it.
            return SKIP_BODY;
        }
    }

    /**
     * Prepare this tag class to be reused.  This is the part of the class where
     * we clear out all private member variables.
     *
     * @return int SKIP_PAGE if JSP processing for the current page should be
     * halted immediately; EVAL_PAGE if it should continue.
     * @exception JspTagException if an error occurs (This is required by the
     * Tag interface.
     */
    public int doEndTag() throws JspTagException {
        //Clear out all private member variables
        clear();
        //Keep on evaluating the page
        return EVAL_PAGE;
    }

    /**
     * Creates a new list of featured objects and adds it as a child object to the parent class.
     */
    public void addFeaturedObjects() {
        try {
            //First, generate the proper object for the type specified by the calling
            //jsp
            NavBarItem featuredObject = NavBarFeaturedItemFactory.create(getSpaceID(), getType(), getUrl());

            //Add this new item to the hierarchy of objects for which XML and HTML will
            //be rendered.
            ((NavBarTagItem)getParent()).addChild(featuredObject);
        } catch (PnetException pe) {
        	Logger.getLogger(FeaturedMenuItemsTag.class).error("Unable to create featured object (probably an unsupported object "+
                                       "type."  + pe);
        }
    }

    /**
     * Resets the internal state of this class to be prepared for the next
     * call to this taglib.  This is called automatically by the web container
     * in preparation for the this taglib being reused.
     */
    public void clear() {
        displayThis = true;
        spaceID = "";
        type = "";
        url = "";
    }

    /**
     * adds a submenu item to this item.
     *
     * @param child a <code>NavBarItem</code> to be the new submenu of this item.
     */
    public void addChild(NavBarItem child)
    {
        ((NavBarTagItem)getParent()).addChild(child);
    }
}
